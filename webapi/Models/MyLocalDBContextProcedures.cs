// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using webapi.Models;

namespace webapi.Models
{
    public partial class MyLocalDBContext
    {
        private IMyLocalDBContextProcedures _procedures;

        public virtual IMyLocalDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MyLocalDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMyLocalDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetMonthlyRevenueSummaryResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MyLocalDBContextProcedures : IMyLocalDBContextProcedures
    {
        private readonly MyLocalDBContext _context;

        public MyLocalDBContextProcedures(MyLocalDBContext context)
        {
            _context = context;
        }

        public virtual async Task<int> AddMonthlyRevenueSummaryAsync(string ReportDate, string DataYearMonth, string CompanyCode, string CompanyName, string Industry, long? CurrentRevenue, long? LastMonthRevenue, long? LastYearSameMonthRevenue, double? MonthlyChangePercent, double? YearlyChangePercent, long? CumulativeCurrentRevenue, long? CumulativeLastYearRevenue, double? CumulativeChangePercent, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportDate",
                    Size = 14,
                    Value = ReportDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataYearMonth",
                    Size = 12,
                    Value = DataYearMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 20,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyName",
                    Size = 100,
                    Value = CompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Industry",
                    Size = 100,
                    Value = Industry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentRevenue",
                    Value = CurrentRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LastMonthRevenue",
                    Value = LastMonthRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LastYearSameMonthRevenue",
                    Value = LastYearSameMonthRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonthlyChangePercent",
                    Value = MonthlyChangePercent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "YearlyChangePercent",
                    Value = YearlyChangePercent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeCurrentRevenue",
                    Value = CumulativeCurrentRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeLastYearRevenue",
                    Value = CumulativeLastYearRevenue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CumulativeChangePercent",
                    Value = CumulativeChangePercent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = -1,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AddMonthlyRevenueSummary] @ReportDate = @ReportDate, @DataYearMonth = @DataYearMonth, @CompanyCode = @CompanyCode, @CompanyName = @CompanyName, @Industry = @Industry, @CurrentRevenue = @CurrentRevenue, @LastMonthRevenue = @LastMonthRevenue, @LastYearSameMonthRevenue = @LastYearSameMonthRevenue, @MonthlyChangePercent = @MonthlyChangePercent, @YearlyChangePercent = @YearlyChangePercent, @CumulativeCurrentRevenue = @CumulativeCurrentRevenue, @CumulativeLastYearRevenue = @CumulativeLastYearRevenue, @CumulativeChangePercent = @CumulativeChangePercent, @Remarks = @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetMonthlyRevenueSummaryResult>> GetMonthlyRevenueSummaryAsync(string CompanyCode, string DataYearMonth, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 20,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataYearMonth",
                    Size = 12,
                    Value = DataYearMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetMonthlyRevenueSummaryResult>("EXEC @returnValue = [dbo].[GetMonthlyRevenueSummary] @CompanyCode = @CompanyCode, @DataYearMonth = @DataYearMonth", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
